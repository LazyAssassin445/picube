
# A jim version of the elevators animation.
# Derived from the animation of the same name within the
#  * 8 x 8 x 8 Cube Application Template, Version 7.0  Â© 2014 by Doug Domke
#  * Downloads of this template and upcoming versions, along with detailed
#  * instructions, are available at: http://d2-webdesign.com/cube

proc ::Lifts::Init {} {
	# Array of lift shafts + floor and direction
	#     (0 = stopped, 1 = up, 2 = down)
	set ::Lifts::data [lrepeat 8 [lrepeat 8 { 0 0 }]]
	loop x 0 8 { loop y 0 8 {
		# Each lift shaft has a 1-in-4 chance of being selected.
		if {[rand 4] == 0} {
			lset ::Lifts::data $x $y "0 [rand 3]"
			# Show the lift
			set colour [cube.colour -get random]
			cube.led $x $y 0 {*}$colour
		} else {
			# stopped on floor -1
			lset ::Lifts::data $x $y "-1 0"
		}
	}}
}

proc Lifts {} {
	::Lifts::Init

	delay 2000

	loop j 0 250 {
		cube.begin -copy
		loop x 0 8 { loop y 0 8 {
			lassign [lindex $::Lifts::data $x $y] floor dir
			if {$floor < 0} continue

			set ofloor $floor

			# Randomly change direction 1/3 of the time
			if {[rand 3] == 0} {
				set dir [rand 3]
			}

			# Erase lift
			set colour [cube.getled $x $y $floor]

			switch $dir {
			    1 {
				# Going up.
				if {$floor < 7} {
					incr floor
				} else {
					incr floor -1
					set dir 2
				}
			    }
			    2 {
				# Going down.
				if {$floor > 0} {
					incr floor -1
				} else {
					incr floor
					set dir 1
				}
			    }
			}

			if {$ofloor != $floor} {
				cube.led $x $y $ofloor 0 0 0
				cube.led $x $y $floor {*}$colour
			}
			lset ::Lifts::data $x $y "$floor $dir"

		}}
		delay $(300 - $j)
		cube.commit
	}

	cube.clear
}

# Accommodate US English
alias Elevators Lifts

if {!$interactive} { Lifts }

