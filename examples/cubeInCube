
# A jim version of the CubeInCube animation.
# Derived from the animation of the same name within the
#  * 8 x 8 x 8 Cube Application Template, Version 7.0  Â© 2014 by Doug Domke
#  * Downloads of this template and upcoming versions, along with detailed
#  * instructions, are available at: http://d2-webdesign.com/cube

# The sprite rendering is significantly faster on newer models of the Pi
# than on old ones, adjust here.
# TODO: Adjust these values for different models.
switch ${pi.code} {
	3B	{ set ::displayCube::delay 50 }
	2B	{ set ::displayCube::delay 10 }
	default	{ set ::displayCube::delay 0 }
}

proc displayCube {side x y z {colour 0} {delay 10}} {
	set s [sprite create $side $side $side]
	$s outline $(127 + $colour)
	$s place $x $y $z
	$s draw -blank
	delay $($delay + $::displayCube::delay)
}

proc bounceCube {side x y z {colour 0}} {
	set s [sprite create $side $side $side]
	$s place $x $y $z
	$s motion 1 2 -1

	loop i 0 66 {
		incr colour 3
		if {$colour > 189} { incr colour -189 }

		$s outline $colour
		$s bounce
		delay 95
	}
	$s hide
}

proc CubeInCube {} {
	loop i 0 4 {
		displayCube 6 1 1 1 
		displayCube 5 1 1 1 5
		displayCube 4 1 1 1 10
		displayCube 3 1 1 1 15
		displayCube 2 1 1 1 20 22
		displayCube 3 1 1 1 15
		displayCube 4 1 1 1 10
		displayCube 5 1 1 1 5
		displayCube 6 1 1 1 0 12
	}
	loop i 0 4 {
		displayCube 6 1 1 1 
		displayCube 5 2 2 1 -15
		displayCube 4 3 3 1 -30
		displayCube 3 4 4 1 -45
		displayCube 2 5 5 1 -60 22
		displayCube 3 4 4 1 -45
		displayCube 4 3 3 1 -30
		displayCube 5 2 2 1 -15
		displayCube 6 1 1 1 0 12
	}
	loop i 0 4 {
		displayCube 6 1 1 1
		displayCube 5 2 1 2 15
		displayCube 4 3 1 3 30
		displayCube 3 4 1 4 45
		displayCube 2 5 1 5 60 22
		displayCube 3 4 1 4 45
		displayCube 4 3 1 3 30
		displayCube 5 2 1 2 15
		displayCube 6 1 1 1 0 12
	}
	loop i 0 4 {
		displayCube 6 1 1 1
		displayCube 5 1 2 2 -20
		displayCube 4 1 3 3 -40
		displayCube 3 1 4 4 -60
		displayCube 2 1 5 5 -80 22
		displayCube 3 1 4 4 -60
		displayCube 4 1 3 3 -40
		displayCube 5 1 2 2 -20
		displayCube 6 1 1 1 0 12
	}

	cube.clear
	bounceCube 4 1 1 1 127

	cube.clear
	delay 500
	loop i 0 5 {
		cube.fill 31 63 63
		delay 10
		cube.clear
		delay 390
	}
}

if {!$interactive} { CubeInCube }

